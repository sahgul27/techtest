name: ci

on:
  push:
    branches: [ "main" ]

jobs:
  build-scan-push:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Install dependencies
      - name: Install dependencies
        run: npm install

      # 4. Run SonarQube scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # 5. Log in to Docker Hub
      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Build and push image to Docker Hub
      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      # (Optional) 7. Push to AWS ECR
      - name: Configure AWS Credentials
        if: ${{ env.AWS_ACCESS_KEY_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        if: ${{ env.AWS_ACCESS_KEY_ID != '' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push to ECR
        if: ${{ env.AWS_ACCESS_KEY_ID != '' }}
        run: |
          ECR_IMAGE="${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME"
          docker build -t $ECR_IMAGE:latest .
          docker push $ECR_IMAGE:latest
